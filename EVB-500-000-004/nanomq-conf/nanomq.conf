log = {
  to = [file, console]                  # Destination of the logs
  level = "info"                       # Log level
  dir = "/var"                          # Directory for log files
  file = "nanomq.log"                   # Filename for the log file
  rotation = {
    size = "10MB"                       # Maximum size of each log file
    count = 5                           # Maximum rotation count of log files
  }
}

auth {
	allow_anonymous = true # Allow clients to connect without providing username/password
	no_match = allow       # Default action if no ACL rules match
	deny_action = ignore   # Action to take if an ACL check rejects an operation

	cache = {
		max_size = 32        # Maximum number of ACL entries to cache for a client
		ttl = 1m             # Time after which an ACL cache entry will be deleted
	}
	
	# password = {include "/etc/nanomq_pwd.conf"} # Path to the password configuration file
	# acl = {include "/etc/nanomq_acl.conf"}       # Path to the ACL configuration file
}

bridges.mqtt.emqx1 {
	# # Bridge address: host:port .
	# #
	# # Value: String
	# # Example: mqtt-tcp://127.0.0.1:1883
	# #          tls+mqtt-tcp://127.0.0.1:8883
	# #          mqtt-quic://54.75.171.11:14567
	server = "mqtt-tcp://10.5.1.1:1883"
	# # Protocol version of the bridge.
	# #
	# # Value: Enum
	# # - 5: mqttv5
	# # - 4: mqttv311
	# # - 3: mqttv31
	proto_ver = 5
	# # The ClientId of a remote bridge.
	# # Default random string.
	# #
	# # Value: String
	# clientid="bridge_client"
	# # Ping: interval of a downward bridge.
	# #
	# # Value: Duration
	# # Default: 10 seconds
	keepalive = 60s
	# # The Clean start flag of a remote bridge.
	# #
	# # Value: boolean
	# # Default: false
	# #
	# # NOTE: Some IoT platforms require clean_start
	# #       must be set to 'true'
	clean_start = false
	# # The username for a remote bridge.
	# #
	# # Value: String
	# username = username
	# # The password for a remote bridge.
	# #
	# # Value: String
	# password = passwd
	# # Topics that need to be forward to IoTHUB
	# #
	# # Value: String
	# # Example: topic1/#,topic2/#
	forwards = [
		{
			remote_topic = "EVB-500-000-004/stress-test/"
			local_topic = "yadablada/"
			qos = 0
		},
		{
			remote_topic = "EVB-500-000-004/root/"
			local_topic = "collectd/"
			qos = 0
		}
	]

	# subscription = [
	# 	{
	# 		# # Need to subscribe to remote broker topics
	# 		# #
	# 		# # Value: String
	# 		remote_topic = "cmd/topic1"
	# 		local_topic = "topic3"
	# 		# # Need to subscribe to remote topics QoS.
	# 		# # Please set QoS for each subscription topic
	# 		# # otherwise topic is invalid, NanoMQ won't sub to any topic
	# 		# # Value: Number
	# 		qos = 1
	# 	},
	# 	{
	# 		remote_topic = "cmd/topic2"
	# 		local_topic = "topic4"
	# 		qos = 2
	# 	}
	# ]
	# # max_parallel_processes
	# # Handle a specified maximum number of outstanding requests
	# #
	# # Value: 1-infinity
	max_parallel_processes = 4
	# # max send queue length
	# # Handle a specified maximum number of message send queue length
	# #
	# # Value: 1-infinity
	max_send_queue_len = 128
	# # max receive queue length
	# # Handle a specified maximum number of message receive queue length
	# #
	# # Value: 1-infinity
	max_recv_queue_len = 32
}

